#!/usr/bin/env bash

# This source code is part of the Board project, a C++ library whose
# purpose is to allow simple drawings in EPS, FIG or SVG files.
# Copyright (C) 2007 Sebastien Fourey <http://foureys.users.greyc.fr/>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

CXX=${CXX-g++}
DESTDIR=${DESTDIR-}
PREFIX=${PREFIX-/usr}
STATIC_LIB_ONLY=no
NUMBER=
DEBUG=
ECHO=echo
[[ -f /usr/ucb/echo ]] && ECHO=/usr/ucb/echo
DOXYGEN=doxygen
SANITIZE=""

#
# Get version number from CMakeLists.txt
#
VERSION=$(grep "^#define BOARD_VERSION" include/BoardConfig.h | head -1)
VERSION=${VERSION/*VERSION }
MAJOR_VERSION=${VERSION%%.*}

function usage() {
    cat << EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  print this message
Directory and file names:
  --prefix=PREFIX         install the library in  PREFIX/include and PREFIX/lib [/usr]
  --debug                 compile with debug options [no]
  --no-doc                don't build the documentation [yes if Doxygen is present]
  --static		  build only the static version of the library [both static and dynamic]
  --sanitize-address      build using -fsanitize=address option
EOF
    exit 0;
}

TAB="	"
MAKE_LDCONFIG_COMMAND="${TAB}ldconfig"

##
## 1. ARGS
## Reading configure arguments
##
while :
do
    [[ $# == 0 ]] && break
    option=$1 ; shift
    case $option in
      --*=*)
	optarg=${option#*=}
	option=${option#--}
	option=${option%%=*}
	;;
      --* )
	optarg=""
	option=${option#--}
	;;
    esac
    case $option in
      static ) STATIC_LIB_ONLY=yes ;;
      debug  ) DEBUG="-g -DBOARD_DEBUG" ;;
      no-doc ) DOXYGEN="" ;;
      sanitize-address ) SANITIZE="-fsanitize=address" ;;
      force-cpp03 ) CXXVERSION="03" ;;
      help | -h ) usage      ;;
      # Debian build options
      build ) BUILD=$optarg ;; # x86_64-linux-gnu
      prefix ) PREFIX=$optarg ;; # --prefix=/usr
      includedir ) INCLUDEDIR=$optarg ;; # \${prefix}/include
      libdir ) LIBDIR=$optarg ;; # \${prefix}/lib/x86_64-linux-gnu
      libexecdir ) LIBEXECDIR=$optarg ;; # \${prefix}/lib/x86_64-linux-gnu
      mandir ) MANPATH=$optarg ;; # \${prefix}/share/man
      infodir ) INFODIR=$optarg ;; # \${prefix}/share/info
      sysconfdir ) SYSCONFDIR=$optarg ;; # /etc
      localstatedir ) LOCALSTATEDIR=$optarg ;; # /var
      disable-option-checking ) ;;
      disable-silent-rules ) ;;
      disable-maintainer-mode ) MAKE_LDCONFIG_COMMAND="" ; DEBUG="-g" ;;
      disable-dependency-tracking ) ;;
      *) echo "${option}: invalid command-line switch" ;  exit 1 ;;
    esac
done

# @param Check if a command exists
function exists()
{
  local command="$1"
  type $command >& /dev/null
}

echo "Configuring build of LibBoard version $VERSION"

LIBDIR=${PREFIX}/lib

mkdir -p obj bin lib

LDFLAGSLIB="-shared -Wl,-soname,libboard.so.${MAJOR_VERSION}"
DYNLIB_EXTENSION=so
##
## Are we on a powerpc (Mac ?)
##
if [[ $(uname -m) = "ppc" ]]; then
  LDFLAGSLIB=-dynamiclib
  DYNLIB_EXTENSION=dynlib
fi

##
##  Are we trying to install "on place" ( PREFIX == `pwd` )
##
ON_PLACE=no
if [ $(realpath ${DESTDIR}${PREFIX}) == $(realpath $PWD) ]; then
    ON_PLACE=yes
    $ECHO Installation on current dir required.
fi

##
## ImageMagick Magick++ ?
##
${ECHO} -n "Looking for ImageMagick C++ API..."
cat > check_magick.cpp <<EOF
#include <Magick++.h>
int main(int , char * argv[]) {
  Magick::InitializeMagick(*argv);
  Magick::Image image;
  try {
   image.read("resources/avatar.png");
  }
  catch ( ... )  {
      return 1;
  }
  return 0;
}
EOF
if exists Magick++-config ; then
  g++ -o check_magick check_magick.cpp $(Magick++-config --cppflags --cxxflags --ldflags --libs) >& /dev/null
  ./check_magick >& /dev/null
  if [[ $? = 0 ]]; then
    MAGICKPLUSPLUS=1
    IMAGE_CXXFLAGS=$(Magick++-config --cxxflags)
    IMAGE_CXXFLAGS="${IMAGE_CXXFLAGS} -Wno-long-long"
    IMAGE_LDFLAGS=$(Magick++-config --ldflags)
    IMAGE_LDFLAGS+=" "$(Magick++-config --libs)
  else
    MAGICKPLUSPLUS=0
  fi
elif exists pkg-config ; then
  g++ -o check_magick check_magick.cpp $(pkg-config --cflags --libs Magick++) >& /dev/null
  ./check_magick >& /dev/null
  if [[ $? = 0 ]]; then
    MAGICKPLUSPLUS=1
    IMAGE_CXXFLAGS=$(pkg-config --cflags Magick++)
    IMAGE_CXXFLAGS="${IMAGE_CXXFLAGS} -Wno-long-long"
    IMAGE_LDFLAGS=$(pkg-config --libs Magick++)
  else
    MAGICKPLUSPLUS=0
  fi
fi
if [[ $MAGICKPLUSPLUS == 1 ]]; then
  IMAGE_EXAMPLES="bin/images"
  echo "Found"
else
  IMAGE_EXAMPLES=""
  IMAGE_CXXFLAGS=""
  IMAGE_LDFLAGS=""
  echo "Not found"
fi
rm -f check_magick check_magick.cpp >& /dev/null

##
## Doxygen ?
##
DOXYGEN_TARGET=""
if [[ -n "$DOXYGEN" ]]; then
  ${ECHO} -n "Looking for doxygen..."
  if ( $DOXYGEN --version >& /dev/null ); then
    echo "Found"
    LICENSE=LICENSE.gz
    DOXYGEN_TARGET="doc"
  else
    DOXYGEN=""
    echo "Not found"
  fi
fi


CPP11=no

##
## Check support of C++ 11
##
echo -n "Checking that compiler supports C++11..."
cat > cpp11.cpp <<EOF
int main()
{
 auto x = 1 + 2;
 return x;
}
EOF
if ( ${CXX} -std=c++11 cpp11.cpp -o a.out >& /dev/null ); then
  CPP11=yes
else
  CPP11=no
fi
rm -f cpp11.cpp a.out
${ECHO} $CPP11


if [[ $CPP11 == no ]]; then
  ${ECHO} "Error: Compiler (${CXX}) does not support C++11, which is required."
  exit 1
fi


##
## GZip
##
LICENSE=LICENSE
${ECHO} -n "Looking for gzip..."
if ( gzip --version > /dev/null ); then
  echo "Found"
  gzip -c LICENSE > LICENSE.gz
  LICENSE=LICENSE.gz
else
  echo "Not found (No big deal, license file won't be compressed. That's all.)"
fi

##
## Are we on a 64 bits arch
##
${ECHO} -n "Checking for 64 bits architecture..."
cat > is64.c <<EOF
int main() {
 unsigned long n = 0;
 n = ~n;
 return n == 0xFFFFFFFF;
}
EOF
gcc -o is64 is64.c
if ./is64; then
  CXX64FLAGS="-fPIC"
  echo yes
else
  CXX64FLAGS=""
  echo no
fi
rm -f is64 is64.c


#
# SAMPLE CODE TARGETS
#
EXAMPLE_TARGETS=""
for f in examples/*.cpp; do
  name=`basename $f .cpp`
  EXAMPLE_TARGETS="${EXAMPLE_TARGETS} bin/${name}"
done

CXXVERSION="--std=c++11"

cat > Makefile <<EOF

CXX = ${CXX}
VERSION=$VERSION
LIBNAME=libboard

DYNLIB_EXTENSION=$DYNLIB_EXTENSION
STATICLIB_EXTENSION=a
DYNLIB_NAME=\$(LIBNAME).\$(DYNLIB_EXTENSION)
STATICLIB_NAME=\$(LIBNAME).\$(STATICLIB_EXTENSION)
DYNLIB=lib/\$(DYNLIB_NAME)
STATICLIB=lib/\$(STATICLIB_NAME)
DESTDIR=
PREFIX=\$(DESTDIR)${PREFIX}
LIBDIR=\$(DESTDIR)${LIBDIR}
RM=rm -f
CP=cp
LD=\$(CXX)
LDFLAGSLIB=$LDFLAGSLIB
AR=ar
ARFLAGS=rsv
LN=ln -s

ifeq (\$(CONFIG),Debug)
CXXFLAGS += -DBOARD_DEBUG -g
CFLAGS += -DBOARD_DEBUG -g
endif

CXXFLAGSOBJ=-O3 ${CXXVERSION} -pedantic -Wall -Wextra -Wno-unknown-pragmas ${DEBUG} ${SANITIZE} -I./include ${CXX64FLAGS}
CXXFLAGSEXEC=-O3 ${CXXVERSION} -pedantic -Wall -Wextra -Wno-unknown-pragmas ${DEBUG} ${SANITIZE} -I./include

.PHONY: all clean install examples lib test_examples doc

OBJS=\$(patsubst src/%.cpp,obj/%.o,\$(wildcard src/*.cpp))

all: lib examples ${DOXYGEN_TARGET}

EOF

LIBDEP="lib: \$(STATICLIB)"
[ "$STATIC_LIB_ONLY" = "no" ] && LIBDEP="lib: \$(STATICLIB) \$(DYNLIB)"

${ECHO} -n "Checking plateform..."
WIN32=0
case $(uname) in
  Linux ) WIN32=0; PLATEFORM=Linux ;;
  Darwin) WIN32=0; PLATEFORM="Mac OS X" ;;
  Darwin ) WIN32=0; PLATEFORM="Mac OS X" ;;
  MINGW* ) WIN32=1; PLATEFORM="Win32/Mingw" ;;
  CYGWIN* ) WIN32=0; PLATEFORM="Cygwin" ;;
esac
${ECHO} $PLATEFORM

${ECHO} -n "Creating include/BoardConfig.h..."
sed -e 's/@Board_Have_MagickPlusPlus@/'${MAGICKPLUSPLUS}'/' \
    -e 's/@Board_Win32@/'${WIN32}'/' \
    -e 's/@LibBoard_VERSION@/'${VERSION}'/' \
    include/BoardConfig.h.in  > include/BoardConfig.h
${ECHO} "done."

${ECHO} -n "Creating Makefile..."
cat >> Makefile <<EOF
$LIBDEP

examples: lib ${EXAMPLE_TARGETS}

\$(DYNLIB): \$(OBJS)
	\$(RM) \$@
	\$(LD) -o \$@ \$(LDFLAGSLIB) \$(OBJS)  ${IMAGE_LDFLAGS}
	chmod 755 \$@

\$(STATICLIB): \$(OBJS)
	\$(RM) \$@
	\$(AR) \$(ARFLAGS) \$@ \$(OBJS)
	chmod 644 \$@

obj/%.o: src/%.cpp  include/board/%.h
	\$(CXX) \$(CXXFLAGSOBJ) ${IMAGE_CXXFLAGS} -c -o \$@ \$<

obj/Board.o: src/Board.cpp include/Board.h
	\$(CXX) \$(CXXFLAGSOBJ) ${IMAGE_CXXFLAGS} -c -o \$@ \$<

bin/%: examples/%.cpp \$(STATICLIB)
	\$(CXX) \$(CXXFLAGSEXEC) -o \$@ \$< ${IMAGE_CXXFLAGS} \$(STATICLIB) ${IMAGE_LDFLAGS}

clean:
	rm -rf out/* obj/*.o lib/* bin/* include/*~ include/board/*~ src/*~ examples/*~ doc/html doc/examples *~

install: all
	install -d \$(LIBDIR)
	chmod 755 \$(LIBDIR)
EOF

if [[ ${ON_PLACE} == no ]]; then
  if [ "$STATIC_LIB_ONLY" = "no" ]; then
    cat >> Makefile <<EOF
	cp \$(DYNLIB) \$(LIBDIR)/\$(DYNLIB_NAME).${VERSION}
	chmod 755 \$(LIBDIR)/\$(DYNLIB_NAME).${VERSION}
	cd \$(LIBDIR) ; ln -s \$(DYNLIB_NAME).${VERSION} ./\$(DYNLIB_NAME)
	cd \$(LIBDIR) ; ln -s \$(DYNLIB_NAME).${VERSION} ./\$(DYNLIB_NAME).${MAJOR_VERSION}
EOF
  fi
  cat >> Makefile <<EOF
	cp \$(STATICLIB) \$(LIBDIR) ; chmod 644 \$(LIBDIR)/\$(STATICLIB_NAME)
	install -d \$(PREFIX)/include/board
	\$(CP) include/Board.h \$(PREFIX)/include/
	\$(CP) include/BoardConfig.h \$(PREFIX)/include/
	\$(CP) include/board/*.h \$(PREFIX)/include/board
${MAKE_LDCONFIG_COMMAND}
EOF
fi
cat >> Makefile <<EOF
	chmod 755 \$(PREFIX)/include/board
	chmod 644 \$(PREFIX)/include/Board.h
	chmod 644 \$(PREFIX)/include/board/*.h
	install -d \$(PREFIX)/share/libboard/examples
	\$(CP) examples/*.cpp \$(PREFIX)/share/libboard/examples
	\$(CP) examples/README \$(PREFIX)/share/libboard/examples
	\$(CP) ${LICENSE} \$(PREFIX)/share/libboard/

doc: doc/html/index.html

doc/html/index.html: src/*.cpp include/Board.h include/board/*.h
	\$(RM) -rf doc/html/* ; doxygen

install-doc: doc
	\$(RM) -rf \$(PREFIX)/share/doc/libboard/html
	install -d \$(PREFIX)/share/doc/libboard
	\$(CP) -r doc/html \$(PREFIX)/share/doc/libboard

out:
	mkdir out

test_examples: out examples
EOF
for example in ${EXAMPLE_TARGETS}; do
  ${ECHO} -e "\tcd out ; ../${example}" >> Makefile
done


${ECHO} "done."

if [[ $MAGICKPLUSPLUS = 0 ]]; then
cat <<EOF

*******************************[ Warning ]**************************************
ImageMagick C++ API (Magick++) was not found. Hence inclusion of bitmap images
will be possible only in SVG files (not in Postscript or FIG files). You may
continue, or install Magick++ for full support of images.

EOF
fi

cat <<EOF

Possible commands are:
 make
 make install      (Will install in ${PREFIX}/include and ${LIBDIR} )
 make doc
 make install-doc  (Will install in ${PREFIX}/share/doc/libboard)
EOF
