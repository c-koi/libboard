#!/bin/sh
CXX=${CXX-g++}
PREFIX=/usr
STATIC_LIB_ONLY=no
NUMBER=
DEBUG=
ECHO=echo
[ -f /usr/ucb/echo ] && ECHO=/usr/ucb/echo
DOXYGEN=doxygen
SANITIZE=""
CXXVERSION="11"

#
# Get version number from CMakeLists.txt
#
VERSION=`grep "^Project.LibBoard" CMakeLists.txt | sed -e 's/.*VERSION\s*//' -e 's/\s*)$//'`

echo "Configuring build of LibBoard version $VERSION"

##
## 1. ARGS
## Reading configure arguments
##
while :
do
    case $# in
    0) break ;;
    esac

    option=$1 ; shift

    case $option in
    --*=*)
	optarg=`echo $option | sed -e 's/^[^=]*=//'`
	arguments="$arguments $option"
	;;
    esac
    case $option in
    --prefix* | --pre*)
	PREFIX=$optarg
	;;
    --static*)
	STATIC_LIB_ONLY=yes
	;;
    --debug*)
	DEBUG="-g"
	;;
    --no-doc*)
	DOXYGEN=""
	;;
    --sanitize-address )
	SANITIZE="-fsanitize=address"
	;;
    --force-cpp03 )
	CXXVERSION="03"
	;;
    -help | --help | --hel | --he)
    # Omit some internal or obsolete options to make the list less imposing.
    # This message is too long to be a string in the A/UX 3.1 sh.
    cat << EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  print this message
Directory and file names:
  --prefix=PREFIX         install the library in  PREFIX/include and PREFIX/lib [/usr]
  --debug                 compile with debug options [no]
  --no-doc                don't build the documentation [yes if Doxygen is present]
  --static		  build only the static version of the library [both static and dynamic]
  --sanitize-address      build using -fsanitize=address option
  --force-cpp03           force C++03 even if compiler supports C++11
EOF
    exit 0;
    ;;

    *)
    echo "${option}: invalid command-line switch"
    exit 1
    ;;
    esac
done

mkdir -p obj bin lib

LDFLAGSLIB=-shared
DYNLIB_EXTENSION=so
##
## Are we on a powerpc (Mac ?)
##
if [ `uname -m` = "ppc" ]; then
    LDFLAGSLIB=-dynamiclib
    DYNLIB_EXTENSION=dynlib
fi

##
##  Are we trying to install "on place" ( PREFIX == `pwd` )
##
ON_PLACE=no
if [ -e ${PREFIX}/include/Board.h -a ./include/Board.h -ef ${PREFIX}/include/Board.h ]; then
    ON_PLACE=yes
    $ECHO Installation on current dir required.
fi

##
## ImageMagick Magick++ ?
##
${ECHO} -n "Looking for ImageMagick C++ API..."
cat > check_magick.cpp <<EOF
#include <Magick++.h>
int main() {
  Magick::Image image;
  try {
   image.read("resources/avatar.png");
  }
  catch ( ... )  {
      return 1;
  }
  return 0;
}
EOF
g++ -o check_magick check_magick.cpp `Magick++-config --cppflags --cxxflags --ldflags --libs` > /dev/null 2>&1
./check_magick > /dev/null 2>&1
if [ $? = 0 ]; then
    MAGICKPLUSPLUS=1
    IMAGE_EXAMPLES="bin/images"
    IMAGE_CXXFLAGS=$(Magick++-config --cxxflags)
    IMAGE_CXXFLAGS="${IMAGE_CXXFLAGS} -Wno-long-long"
    IMAGE_LDFLAGS=$(Magick++-config --ldflags)
    echo "Found"
else
    MAGICKPLUSPLUS=0
    IMAGE_EXAMPLES=""
    IMAGE_CXXFLAGS=""
    IMAGE_LDFLAGS=""
    echo "Not found"
fi
rm -f check_magick check_magick.cpp > /dev/null 2>&1

##
## Doxygen ?
##
DOXYGEN_TARGET=""
if [ -n "$DOXYGEN" ]; then
    ${ECHO} -n "Looking for doxygen..."
    if ( $DOXYGEN --version > /dev/null 2>&1 ); then
	echo "Found"
	LICENSE=LICENSE.gz
	DOXYGEN_TARGET="doc"
    else
	DOXYGEN=""
	echo "Not found"
    fi
fi


##
## C++ version
##
if [ $CXXVERSION = "11" ]; then
    echo -n "Checking that compiler supports C++11..."
    cat > cpp11.cpp <<EOF
    int main()
    {
      auto x = 1 + 2;
      return 0;
    }
EOF
    if ( ${CXX} --std=c++11 cpp11.cpp -o a.out > /dev/null 2>&1 ); then
	echo "yes"
    else
	echo "no"
	CXXVERSION="03"
    fi
    rm -f cpp11.cpp a.out
fi
if [ $CXXVERSION = "03" ]; then
    ${ECHO} "Compiling with C++98/03 standard."
fi
CXXVERSION="--std=c++${CXXVERSION}"

##
## GZip
##
LICENSE=LICENSE
${ECHO} -n "Looking for gzip..."
if ( gzip --version > /dev/null ); then
    echo "Found"
    gzip -c LICENSE > LICENSE.gz
    LICENSE=LICENSE.gz
else
    echo "Not found (No big deal, license file won't be compressed. That's all.)"
fi

##
## Are we on a 64 bits arch
##
${ECHO} -n "Checking for 64 bits architecture..."
cat > is64.c <<EOF
int main() {
 unsigned long n = 0;
 n = ~n;
 return n == 0xFFFFFFFF;
}
EOF
gcc -o is64 is64.c
if ./is64; then
CXX64FLAGS="-fPIC"
echo yes
else
CXX64FLAGS=""
echo no
fi
rm -f is64 is64.c


#
# SAMPLE CODE TARGETS
#
EXAMPLE_TARGETS=""
for f in examples/*.cpp; do
    name=`basename $f .cpp`
    EXAMPLE_TARGETS="${EXAMPLE_TARGETS} bin/${name}"
done

cat > Makefile <<EOF

CXX = ${CXX}
VERSION=$VERSION
LIBNAME=libboard

DYNLIB_EXTENSION=$DYNLIB_EXTENSION
STATICLIB_EXTENSION=a
DYNLIB_NAME=\$(LIBNAME).\$(DYNLIB_EXTENSION)
STATICLIB_NAME=\$(LIBNAME).\$(STATICLIB_EXTENSION)
DYNLIB=lib/\$(DYNLIB_NAME)
STATICLIB=lib/\$(STATICLIB_NAME)
PREFIX=$PREFIX
RM=rm -f
CP=cp
LD=\$(CXX)
LDFLAGSLIB=$LDFLAGSLIB
AR=ar
ARFLAGS=rsv
LN=ln -s

CXXFLAGSOBJ=-O3 ${CXXVERSION} -pedantic -Wall -W ${DEBUG} ${SANITIZE} -I./include ${CXX64FLAGS}
CXXFLAGSEXEC=-O3 ${CXXVERSION} -pedantic -Wall -W ${DEBUG} ${SANITIZE} -I./include

.PHONY: all clean distclean install examples lib doc

OBJS=\$(patsubst src/%.cpp,obj/%.o,\$(wildcard src/*.cpp))

all: lib examples ${DOXYGEN_TARGET}

EOF

LIBDEP="lib: \$(STATICLIB)"
[ "$STATIC_LIB_ONLY" = "no" ] && LIBDEP="lib: \$(STATICLIB) \$(DYNLIB)"

${ECHO} -n "Checking plateform..."
WIN32=0
case $(uname) in
    Linux ) WIN32=0; PLATEFORM=Linux ;;
    Darwin) WIN32=0; PLATEFORM="Mac OS X" ;;
    Darwin ) WIN32=0; PLATEFORM="Mac OS X" ;;
    MINGW* ) WIN32=1; PLATEFORM="Win32/Mingw" ;;
    CYGWIN* ) WIN32=0; PLATEFORM="Cygwin" ;;
esac
${ECHO} $PLATEFORM

${ECHO} -n "Creating include/BoardConfig.h..."
sed -e 's/@Board_Have_MagickPlusPlus@/'${MAGICKPLUSPLUS}'/' \
    -e 's/@Board_Win32@/'${WIN32}'/' \
    -e 's/@LibBoard_VERSION@/'${VERSION}'/' \
    include/BoardConfig.h.in  > include/BoardConfig.h
${ECHO} "done."

${ECHO} -n "Creating Makefile..."
cat >> Makefile <<EOF
$LIBDEP

examples: lib ${EXAMPLE_TARGETS}

\$(DYNLIB): \$(OBJS)
	\$(RM) \$@
	\$(LD) -o \$@ \$(LDFLAGSLIB) \$(OBJS)  ${IMAGE_LDFLAGS}
	chmod 755 \$@

\$(STATICLIB): \$(OBJS)
	\$(RM) \$@
	\$(AR) \$(ARFLAGS) \$@ \$(OBJS)
	chmod 644 \$@

obj/%.o: src/%.cpp  include/board/%.h
	\$(CXX) \$(CXXFLAGSOBJ) ${IMAGE_CXXFLAGS} -c -o \$@ \$<

obj/Board.o: src/Board.cpp include/Board.h
	\$(CXX) \$(CXXFLAGSOBJ) ${IMAGE_CXXFLAGS} -c -o \$@ \$<

bin/%: examples/%.cpp \$(STATICLIB)
	\$(CXX) \$(CXXFLAGSEXEC) -o \$@ \$< ${IMAGE_CXXFLAGS} ${IMAGE_LDFLAGS} \$(STATICLIB)

clean:
	rm -f obj/*.o lib/* bin/* include/*~ include/board/*~ src/*~ examples/*~ *~

distclean: clean
	rm -rf obj lib bin

install: all
	install -d \$(PREFIX)/lib
	chmod 755 \$(PREFIX)/lib
EOF

if [ ${ON_PLACE} = no ]; then
    if [ "$STATIC_LIB_ONLY" = "no" ]; then
	${ECHO} "	cp \$(DYNLIB) \$(PREFIX)/lib ; chmod 755 \$(PREFIX)/lib/\$(DYNLIB_NAME)" >> Makefile
    fi
    cat >> Makefile <<EOF
	cp \$(STATICLIB) \$(PREFIX)/lib ; chmod 644 \$(PREFIX)/lib/\$(STATICLIB_NAME)
	install -d \$(PREFIX)/include/board
	\$(CP) include/Board.h \$(PREFIX)/include/
	\$(CP) include/BoardConfig.h \$(PREFIX)/include/
	\$(CP) include/board/*.h \$(PREFIX)/include/board
	\$(CP) include/board/*.ih \$(PREFIX)/include/board
	ldconfig
EOF
fi
cat >> Makefile <<EOF
	chmod 755 \$(PREFIX)/include/board
	chmod 644 \$(PREFIX)/include/Board.h
	chmod 644 \$(PREFIX)/include/board/*.h
	chmod 644 \$(PREFIX)/include/board/*.ih
	install -d \$(PREFIX)/share/libboard/examples
	\$(CP) examples/*.cpp \$(PREFIX)/share/libboard/examples
	\$(CP) examples/README \$(PREFIX)/share/libboard/examples
	\$(CP) ${LICENSE} \$(PREFIX)/share/libboard/

doc: doc/html/index.html

doc/html/index.html: src/*.cpp include/Board.h include/board/*.h
	\$(RM) -rf doc/html/* ; doxygen

install-doc: doc
	\$(RM) -rf \$(PREFIX)/share/doc/libboard/html
	install -d \$(PREFIX)/share/doc/libboard
	\$(CP) -r doc/html \$(PREFIX)/share/doc/libboard
EOF

${ECHO} "done."

if [ $MAGICKPLUSPLUS = 0 ]; then
cat <<EOF

*******************************[ Warning ]**************************************
ImageMagick C++ API (Magick++) was not found. Hence inclusion of bitmap images
will be possible only in SVG files (not in Postscript or FIG files). You may
continue, or install Magick++ for full support of images.

EOF
fi

cat <<EOF

Possible commands are:
 make
 make install      (Will install in ${PREFIX}/include and ${PREFIX}/lib )
 make doc
 make install-doc  (Will install in ${PREFIX}/share/doc/libboard)
EOF
